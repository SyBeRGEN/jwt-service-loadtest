services:
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - backend

  influxdb:
    image: influxdb:1.8
    container_name: influxdb
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb
    networks:
      - backend
    environment:
      - INFLUXDB_DB=jmeter
      - INFLUXDB_HTTP_AUTH_ENABLED=false

  verification-service:
    build:
      context: ./verification-service
      dockerfile: Dockerfile
    container_name: verification-service
    ports:
      - "8082:8082"
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - SPRING_REDIS_HOST=redis
    networks:
      - backend

  user-auth:
    build:
      context: ./user-auth
      dockerfile: Dockerfile
    container_name: user-auth
    ports:
      - "8080:8080"
    depends_on:
      redis:
        condition: service_healthy
      verification-service:
        condition: service_started
    environment:
      - SPRING_REDIS_HOST=redis
      - VERIFICATION_SERVICE_URL=http://verification-service:8082/api/verify
    networks:
      - backend

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - backend

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - backend


volumes:
  redis_data:
  influxdb_data:
  grafana-storage:

networks:
  backend:
